{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb2 // Select the circle element\
const circleElement = document.querySelector(\'91 \{cursor\} \'92);\
\
// Create objects to track mouse position and custom cursor position\
const mouse = \{ x: 0, y: 0 \}; // Track current mouse position\
const previousMouse = \{ x: 0, y: 0 \} // Store the previous mouse position\
const circle = \{ x: 0, y: 0 \}; // Track the circle position\
\
// Initialize variables to track scaling and rotation\
let currentScale = 0; // Track current scale value\
let currentAngle = 0; // Track current angle value\
\
// Update mouse position on the 'mousemove' event\
window.addEventListener('mousemove', (e) => \{\
  mouse.x = e.x;\
  mouse.y = e.y;\
\});\
\
// Smoothing factor for cursor movement speed (0 = smoother, 1 = instant)\
const speed = 0.12;\
\
// Start animation\
const tick = () => \{\
  // MOVE\
  // Calculate circle movement based on mouse position and smoothing\
  circle.x += (mouse.x - circle.x) * speed;\
  circle.y += (mouse.y - circle.y) * speed;\
  // Create a transformation string for cursor translation\
  const translateTransform = `translate($\{circle.x\}px, $\{circle.y\}px)`;\
\
  // SQUEEZE\
  // 1. Calculate the change in mouse position (deltaMouse)\
  const deltaMouseX = mouse.x - previousMouse.x;\
  const deltaMouseY = mouse.y - previousMouse.y;\
  // Update previous mouse position for the next frame\
  previousMouse.x = mouse.x;\
  previousMouse.y = mouse.y;\
  // 2. Calculate mouse velocity using Pythagorean theorem and adjust speed\
  const mouseVelocity = Math.min(Math.sqrt(deltaMouseX**2 + deltaMouseY**2) * 4, 150); \
  // 3. Convert mouse velocity to a value in the range [0, 0.5]\
  const scaleValue = (mouseVelocity / 150) * 0.5;\
  // 4. Smoothly update the current scale\
  currentScale += (scaleValue - currentScale) * speed;\
  // 5. Create a transformation string for scaling\
  const scaleTransform = `scale($\{1 + currentScale\}, $\{1 - currentScale\})`;\
\
  // ROTATE\
  // 1. Calculate the angle using the atan2 function\
  const angle = Math.atan2(deltaMouseY, deltaMouseX) * 180 / Math.PI;\
  // 2. Check for a threshold to reduce shakiness at low mouse velocity\
  if (mouseVelocity > 20) \{\
    currentAngle = angle;\
  \}\
  // 3. Create a transformation string for rotation\
  const rotateTransform = `rotate($\{currentAngle\}deg)`;\
\
  // Apply all transformations to the circle element in a specific order: translate -> rotate -> scale\
  circleElement.style.transform = `$\{translateTransform\} $\{rotateTransform\} $\{scaleTransform\}`;\
\
  // Request the next frame to continue the animation\
  window.requestAnimationFrame(tick);\
\}\
\
// Start the animation loop\
tick();\
\
\
const cursor = document.querySelector('.cursor');\
\
// GSAP cursor visibility functions\
const updateCursorVisibility = (shouldShow) => \{\
  gsap.to(cursor, \{ duration: 0.3,display: true ,opacity: shouldShow ? 1 : 0 \});\
\};\
\
// Handle cursor visibility based on mouse events\
window.addEventListener('mouseout', (e) => \{\
  if (e.clientY <= 0 || e.clientX <= 0 || e.clientY >= window.innerHeight || e.clientX >= window.innerWidth) \{\
    updateCursorVisibility(false);\
  \}\
\});\
\
window.addEventListener('mouseover', (e) => \{\
  if (e.clientY > 0 && e.clientX > 0 && e.clientY < window.innerHeight && e.clientX < window.innerWidth) \{\
    updateCursorVisibility(true);\
  \}\
\});}